.\"   $Id: freerdsins.3,v 1.1 2002/03/13 13:37:37 fred Exp $
.\" @(#)freerdsins.1 1.11 93/08/18 ; Labo masi cao-vlsi
.if t \{\
.so man1/alc_contents.mac
.XS \n%
.ti 0.2i
freerdsins
.XE
.XS0 \n%
.ti 0.2i
freerdsins
.XE0 \}
.TH FREERDSINS 3 "October 1, 1997" "ASIM/LIP6" "RDS PHYSICAL FUNCTIONS"
.SH NAME
 freerdsins \- frees memory associated to an instance
.so man1/alc_origin.1
.SH SYNOPSIS
.nf
.if n \{\
.ft B \}
.if t \{\
.ft CR \}
 #include "rdsnnn.h"
 void freerdsins ( Instance )
   rdsins_list \(**Instance;
.ft R
.fi
.SH PARAMETER
.TP 20
 \fIInstance\fP
Pointer of the instance to free 
.SH DESCRIPTION
This function frees the memory associated to the instance. Memory place used by the Pointers of the rdsins_list structure is not free so the user has to free these pointers before calling the freerdsins() function.
.SH RETURN VALUE
nothing
.SH ERRORS
none
.SH EXAMPLE
.ta 3n 6n 9n 12n 15n 18n 21n
.nf
.if n \{\
.ft B \}
.if t \{\
.ft CR \}
          #include "mutnnn.h"
          #include "rdsnnn.h"
          #include "rtlnnn.h"
	    main()
	     {
	       rdsins_list \(**Instance;
               mbkenv();
               rdsenv();
               loadrdsparam();
	       Instance = allocrdsins ();
	       Instance->NAME = rdsalloc(strlen("and1")+1,RDS_ALLOC_BLOCK);
	       strcpy(Instance->NAME,"and1");
	       ...
	       rdsfree    (Instance->NAME,RDS_ALLOC_BLOCK); 
	       /\(** \(**/ \fBfreerdsins\fP ( Instance,RDS_ALLOC_BLOCK);
	     }
.ft R
.fi
.SH SEE ALSO
.BR librds,
.BR allocrdsins


.so man1/alc_bug_report.1

