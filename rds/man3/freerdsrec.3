.\"   $Id: freerdsrec.3,v 1.1 2002/03/13 13:37:37 fred Exp $
.\" @(#)freerdsrec.1 1.11 93/08/18 ; Labo masi cao-vlsi
.if t \{\
.so man1/alc_contents.mac
.XS \n%
.ti 0.2i
freerdsrec
.XE
.XS0 \n%
.ti 0.2i
freerdsrec
.XE0 \}
.TH FREERDSREC 3 "October 1, 1997" "ASIM/LIP6" "RDS PHYSICAL FUNCTIONS"
.SH NAME
 freerdsrec \- free memory associated to a rectangle
.so man1/alc_origin.1
.SH SYNOPSIS
.nf
.if n \{\
.ft B \}
.if t \{\
.ft CR \}
 #include "rdsnnn.h"
  void freerdsrec( Rectangle, Size )
    rdsrec_list  \(**Rectangle;
    unsigned int  Size;
.ft R
.fi
.SH PARAMETER
.TP 20
\fIRectangle\fP
Pointer of the rectangle structure to free.
.TP
\fISize\fP
Size of the structure added (if it exists) to rdsrec_list structure.
.SH DESCRIPTION
This function deletes the memory associated to the rectangle. Memory used is both memory of rdsrec_list structure and memory of the structure added by the user. If the user structure doesn't exist, the parameter \'Size\' must be to 0L. Memory place used by the Pointers of the rdsrec_list structure (and the added structure) is not deleted so the user has to free these pointers before calling the freerdsrec() function.
.SH RETURN VALUE 
nothing
.SH ERRORS
none
.SH EXAMPLE
.ta 3n 6n 9n 12n 15n 18n 21n
.nf
.if n \{\
.ft B \}
.if t \{\
.ft CR \}
           #include "mutnnn.h"
           #include "rdsnnn.h"
           #include "rtlnnn.h"
	    typedef struct UserStruct
	     {
	       char \(**STRING;
	       void \(**USER1;
	     } UserStruct;
	    main()
	     {
	       rdsrec_list \(**Rectangle;
               mbkenv();
               rdsenv();
               loadrdsparam();
	       Rectangle = allocrdsrec ( sizeof ( UserStruct ) );
	       ...
	       /\(** \(**/ \fBfreerdsrec\fP ( Rectangle, sizeof ( UserStruct ) );            
	     }
.ft R
.fi
.SH SEE ALSO
.BR librds,
.BR freerdsrec,
.BR rdsfree


.so man1/alc_bug_report.1

