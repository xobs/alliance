.\"   $Id: abl.1,v 1.1 2002/03/18 11:06:15 ludo Exp $
.\" @(#)log.l 0.0 92/08/01 UPMC; Author: Luc Burgun 
.pl -.4
.TH ABL 1 "October 1, 1997" "ASIM/LIP6" "cao\-vlsi reference manual"
.SH NAME
\fBabl\fP \- Prefixed representation for boolean functions
.so man1/alc_origin.1
.SH DESCRIPTION
\fIlibablmmm.a\fP is a library that enables to represent a boolean function in a LISP-like form. An ABL is a prefixed internal representation for a boolean function having standard operators as OR,NOR,NAND,XOR,NOT and AND. An ABL is only made up of doublets. A doublet is composed of two fields which are accessible by the functionnal \fI#define\fP \fICAR\fP and \fICDR\fP. A doublet is implemented with a MBK \fIchain_list\fP. 
.br
\fIExpression\fP is the generic term for a boolean function represented by an ABL. An expression can be an atomic expression or an operator expression. The function \fBf = a\fP is represented by an atomic expression whereas \fBf = (or a b)\fP is represented by an operator expression. An atomic expression is made up of a single doublet having the \fINEXT\fP pointer equal to NULL and \fIDATA\fP pointer equal to the identifier pointer. A constant atomic expression is an atomic expression having the string  "'0'" or "'1'" as identifier.
.br
An operator expression is more complicated than an atomic expression. It's a list of items, the first item is the head operator of the expression and the following items are the arguments of the expression. It's possible to go trough the arguments by calling the functionnal \fI#define\fP \fICDR\fP. Then each argument is accessible by the functionnal \fI#define\fP \fICAR\fP. An argument can be recursively an atomic or an operator expression. The arity of an operator expression is the number of arguments of the first level. 
.br
.br
Functions are divided into two groups, the low level functions are written with \fI#define\fP and are used to manage the ABL internal form, the high level functions are used to manage the boolean expressions. All functions are defined in the file "prefbib.c" (\fI#define\fP in "logmmm.h").
.TP
\fIFunctionnal #define\fP
.TP 20
\fBATOM\fP
\- checks the kind of an expression (atomic or operator expression). 
.TP 20
\fBCAR\fP
\- returns the \fIDATA\fP pointer of a doublet.
.TP 20
\fBCADR\fP
\- returns the \fIDATA\fP pointer of the \fINEXT\fP pointer of a doublet.
.TP 20
\fBCDR\fP
\- returns the \fINEXT\fP pointer of a doublet.
.TP 20
\fBOPER\fP
\- returns the operator number of an operator expression.
.TP 20
\fBVALUE_ATOM\fP
\- returns the associated \fIchar *\fP of an atomic expression.
.br
.TP
\fIFunctions and procedures\fP
.TP 20
\fBaddHExpr\fP
\- adds a new arguments at the head of an operator expression. 
.TP 20
\fBaddQExpr\fP
\- adds a new arguments at the queue of an operator expression. 
.TP 20
\fBanyExpr\fP
\- returns the value of a logical OR applied on the results of the application of a function on the arguments of an operator expression.
.TP 20
\fBchangeOperExpr\fP
\- changes the operator of the head of an expression.
.TP 20
\fBcharToOper\fP
\- converts an operator string into an operator number.
.TP 20
\fBcopyExpr\fP
\- copies an expression. 
.TP 20
\fBcreateAtom\fP
\- creates an atomic expression. 
.TP 20
\fBcreateBinExpr\fP
\- creates a binary operator expression with an eventual merging of the operator. 
.TP 20
\fBcreateExpr\fP
\- creates the head of an operator expression. 
.TP 20
\fBdeleteNumExpr\fP
\- removes the i-th argument in an operator expression. 
.TP 20
\fBdevXor2Expr\fP
\- converts XOR 2 to OR-AND.
.TP 20
\fBdevXorExpr\fP
\- removes XOR in an expression. 
.TP 20
\fBdisplayExpr\fP
\- displays an expression in a prefixed notation. 
.TP 20
\fBdisplayInfExpr\fP
\- displays an expression in infixed notation. 
.TP 20
\fBequalExpr\fP
\- checks that two expressions are strictly equal. 
.TP 20
\fBequalVarExpr\fP
\- checks that two expressions are syntactically equal. 
.TP 20
\fBeveryExpr\fP
\- returns the value of a logical AND applied on the results of the application of a function on the arguments of an operator expression.
.TP 20
\fBexprToChar\fP
\- converts an expression into a string.
.TP 20
\fBcharToExpr\fP
\- converts a string into an expression.
.TP 20
\fBflatArityExpr\fP
\- flattens the operators of an expression. 
.TP 20
\fBflatPolarityExpr\fP
\- translates the inverters of an expression to the level of atomic expressions. 
.TP 20
\fBfreeExpr\fP
\- frees an expression. 
.TP 20
\fBidentExpr\fP
\- gives an identifier from an operator expression. 
.TP 20
\fBlengthExpr\fP
\- returns the number of arguments in an expression. 
.TP 20
\fBmapCarExpr\fP
\- creates a new expression by applying a function to all arguments of an operator expression. 
.TP 20
\fBmapExpr\fP
\- applies a procedure to all the arguments of an operator expression. 
.TP 20
\fBmaxExpr\fP
\- returns the highest argument of an operator expression. 
.TP 20
\fBminExpr\fP
\- returns the lowest argument of an operator expression. 
.TP 20
\fBnormExpr\fP
\- normalizes an expression. 
.TP 20
\fBnotExpr\fP
\- complements an expression and eventually does a simplification. 
.TP 20
\fBnumberAtomExpr\fP
\- returns the number of atoms in an expression.
.TP 20
\fBnumberOccExpr\fP
\- returns the number of time an atom appears in an expression. 
.TP 20
\fBnumberOperBinExpr\fP
\- returns the number of equivalent binary operators in an expression.
.TP 20
\fBoperToChar\fP
\- converts an operator number into an operator string. 
.TP 20
\fBprofExpr\fP
\- returns the depth of an expression. 
.TP 20
\fBprofAOExpr\fP
\- returns the depth of an expression without taking the inverters into account. 
.TP 20
\fBsearchExpr\fP
\- searches for a specific atom in an expression. 
.TP 20
\fBsearchNumExpr\fP
\- fetches the i-th argument in an operator expression. 
.TP 20
\fBsearchOperExpr\fP
\- searches for an operator in an expression. 
.TP 20
\fBsimplif10Expr\fP
\- makes simplifications on an expression including constant atomic expressions.  
.TP 20
\fBsimplifNotExpr\fP
\- makes simplifications on an expression including inverters.  
.TP 20
\fBsortExpr\fP
\- sorts an expression. 
.TP 20
\fBsubstExpr\fP
\- copies an expression by substituting a given atom by an expression. 
.TP 20
\fBsubstPhyExpr\fP
\- substitutes an atomic expression by an expression within an expression. 
.TP 20
\fBsupportChain_listExpr\fP
\- returns the support of an expression in a \fIchain_list\fP. 
.TP 20
\fBsupportPtype_listExpr\fP
\- returns the support of an expression in a \fIptype_list\fP. 
.TP 20
\fBwPMExpr\fP
\- returns 1 if the pattern matching is possible between two expressions.

.br
.SH SEE ALSO
.BR log (1),
.BR mbk (1),
.BR addHExpr (3),
.BR addQExpr (3),
.BR anyExpr (3),
.BR changeOperExpr (3),
.BR charToExpr (3),
.BR charToOper (3),
.BR copyExpr (3),
.BR createAtom (3),
.BR createBinExpr (3),
.BR createExpr (3),
.BR deleteNumExpr (3),
.BR devXor2Expr (3),
.BR devXorExpr (3),
.BR displayExpr (3),
.BR displayInfExpr (3),
.BR equalExpr (3),
.BR equalVarExpr (3),
.BR everyExpr (3),
.BR exprToChar (3),
.BR flatArityExpr (3),
.BR flatPolarityExpr (3),
.BR freeExpr (3),
.BR identExpr (3),
.BR lengthExpr (3),
.BR mapCarExpr (3),
.BR mapExpr (3),
.BR maxExpr (3),
.BR minExpr (3),
.BR notExpr (3),
.BR normExpr (3),
.BR numberAtomExpr (3),
.BR numberOccExpr (3),
.BR numberOperBinExpr (3),
.BR operToChar (3),
.BR profExpr (3),
.BR profAOExpr (3),
.BR searchExpr (3),
.BR searchNumExpr (3),
.BR searchOperExpr (3),
.BR simplif10Expr (3),
.BR simplifNotExpr (3),
.BR sortExpr (3),
.BR substExpr (3),
.BR substPhyExpr (3),
.BR supportChain_listExpr (3),
.BR supportPtype_listExpr (3).
.BR PMExpr (3).

.so man1/alc_bug_report.1

