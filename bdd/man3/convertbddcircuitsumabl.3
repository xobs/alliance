.\"   $Id: convertbddcircuitsumabl.3,v 1.1 2002/03/18 11:26:50 ludo Exp $
.\" @(#)convertbddcircuitsumabl.2 2.7 96/07/02 ; Labo masi cao-vlsi; Author : Jacomme Ludovic
.TH CONVERTBDDCIRCUITSUMABL 3 "October 1, 1997" "ASIM/LIP6" "BDD FUNCTIONS"
.SH NAME
convertbddcircuitsumabl \- converts a \fBbdd\fP node to an \fBabl\fP expression.

.so man1/alc_origin.1
.SH SYNOPSIS
.nf
.if n \{\
.ft B \}
.if t \{\
.ft CR \}
#include "bdd101.h"
chain_list \(**convertbddcircuitsumabl( BddCircuit, BddNode )
  bddcircuit \(**BddCircuit;
  bddnode    \(**BddNode;
.ft R
.fi
.SH PARAMETERS
.TP 20
\fIBddCircuit\fP
The \fBbdd\fP circuit.
.TP
\fIBddNode\fP
The \fBbdd\fP node to convert.
.SH DESCRIPTION
\fBconvertbddcircuitsumabl\fP converts the \fBbdd\fP node
to a non optimal \fBabl\fP expression. The \fIBddCircuit\fP is used to translate
the variable nodes into atomic expressions.
If a null pointer is given, the default \fBbdd\fP circuit is used.
.br
.SH RETURN VALUE
\fBconvertbddcircuitsumabl\fP returns a pointer to the \fBabl\fP expression translated.
.SH EXAMPLE
.ta 3n 6n 9n 12n 15n 18n 21n
.nf
.if n \{\
.ft B \}
.if t \{\
.ft CR \}
#include "bdd101.h"
   bddsystem  \(**BddSystem;
   bddcircuit \(**BddCircuit;
   bddnode    \(**BddNode;
   chain_list \(**Expr;
   BddSystem  = createbddsystem( 100, 1000, 100, 50000 );
   BddCircuit = createbddcircuit( "hello_world", 10, 10, BddSystem );
   Expr = createablbinexpr( ABL_AND,
                            createablatom( "i0" ),
                            createablatom( "i1" ) );
   BddNode = addbddcircuitsumabl( BddCircuit, Expr );
   freeablexpr( Expr );
   Expr = convertbddcircuitsumabl( BddCircuit, BddNode );
   /* displays (i0 and i1) */
   viewablexpr( Expr, ABL_VIEW_VHDL );
   freeablexpr( Expr );
   destroybddsystem( (bddsystem \(**)0 );
   destroybddcircuit( (bddcircuit \(**)0 );
.ft R
.fi
.SH SEE ALSO
.BR bdd (1),
.BR abl (1),
.BR addbddcircuitabl(3).


.so man1/alc_bug_report.1

