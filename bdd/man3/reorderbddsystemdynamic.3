.\"   $Id: reorderbddsystemdynamic.3,v 1.1 2002/03/18 11:26:50 ludo Exp $
.\" @(#)reorderbddsystemdynamic.2 2.7 96/07/02 ; Labo masi cao-vlsi; Author : Jacomme Ludovic
.TH REORDERBDDSYSTEMDYNAMIC 3 "October 1, 1997" "ASIM/LIP6" "BDD FUNCTIONS"
.SH NAME
reorderbddsystemdynamic \- specifies the dynamic \fBbdd\fP reorder parameters.
.so man1/alc_origin.1
.SH SYNOPSIS
.nf
.if n \{\
.ft B \}
.if t \{\
.ft CR \}
#include "bdd101.h"
void reorderbddsystemdynamic( BddSystem, ReorderFunc, ReorderLow, ReorderRatio )
  bddsystem \(**BddSystem;
  void     (\(**ReorderFunc)();
  long       ReorderLow;
  long       ReorderRatio;
.ft R
.fi
.SH PARAMETERS
.TP 20
\fIBddSystem\fP
The \fBbdd\fP system.
.TP
\fIReorderFunc\fP
The dynamic reorder method.
.TP
\fIReorderLow\fP
The minimum number of \fBbdd\fP nodes.
.TP
\fIReorderRatio\fP
The reorder ratio in percent.
.SH DESCRIPTION
\fBreorderbddsystemdynamic\fP specifies to parameters for the dynamic reorder
in the \fBbdd\fP system \fIBddSystem\fP.
If a null pointer is given, the default \fBbdd\fP system is used.
If the number of \fBbdd\fP nodes is greater than \fIReorderLow\fP, then
the dynamic reorder function \fIReorderFunc\fP is called. The new 
reorder limit is computed as the product of the number of \fBbdd\fP nodes
and the \fIReorderRatio\fP value plus 100.  If this limit is less than \fIReorderLow\fP
then the new limit is fixed to \fIReorderLow\fP. If the function \fIReorderFunc\fP is a null 
pointer, then the dynamic reorder process is skipped.
.br
.SH RETURN VALUE
\fBreorderbddsystemdynamic\fP returns nothing.
.SH EXAMPLE
.ta 3n 6n 9n 12n 15n 18n 21n
.nf
.if n \{\
.ft B \}
.if t \{\
.ft CR \}
#include "bdd101.h"
   bddsystem \(**BddSystem;
   BddSystem = createbddsystem( 100, 1000, 100, 50000 );
   reorderbddsystemdynamic( BddSystem, reorderbddsystemwindow, 1000, 50 );
   ...
   destroybddsystem( BddSystem );
.ft R
.fi
.SH SEE ALSO
.BR bdd (1)


.so man1/alc_bug_report.1

